
import theano
import theano.tensor as T
from black_box_alpha import BB_alpha

import os

import sys

import numpy as np

import gzip

import cPickle

import random


# We download the data

def load_data():
    # We load the data
    data = np.loadtxt('../data/data.txt')

    # We load the indexes for the features and for the target

    index_features = np.loadtxt('../data/index_features.txt')
    index_target = np.loadtxt('../data/index_target.txt')

    X = data[ : , index_features.tolist() ]
    y = data[ : , index_target.tolist() ]

    i = np.int(np.loadtxt('simulation_index.txt'))

    # We load the indexes of the training set

    index_train = np.loadtxt("../data/index_train_{}.txt".format(i))
    index_test = np.loadtxt("../data/index_test_{}.txt".format(i))

    X_train = X[ index_train.tolist(), ]
    y_train = y[ index_train.tolist() ][ : , None ]
    X_test = X[ index_test.tolist(), ]
    y_test = y[ index_test.tolist() ][ : , None ]

    # We normalize the features

    std_X_train = np.std(X_train, 0)
    std_X_train[ std_X_train == 0 ] = 1
    mean_X_train = np.mean(X_train, 0)
    X_train = (X_train - mean_X_train) / std_X_train
    X_test = (X_test - mean_X_train) / std_X_train
    mean_y_train = np.mean(y_train, 0)
    std_y_train = np.std(y_train, 0)

    y_train = (y_train - mean_y_train) / std_y_train

    X_train_All = X_train
    y_train_All = y_train

    X_train = X_train_All[0:20, :]
    y_train = y_train_All[0:20, :]

    X_pool = X_train_All[20:, :]
    y_pool = y_train_All[20:, :]


    return X_train, y_train, X_test, y_test, X_pool, y_pool, mean_y_train, std_y_train


def shared_dataset(data_xy, borrow=True):

    data_x, data_y = data_xy
    shared_x = theano.shared(np.asarray(data_x, dtype=theano.config.floatX), borrow=borrow)
    shared_y = theano.shared(np.asarray(data_y, dtype=theano.config.floatX), borrow=borrow)

    return shared_x, T.cast(shared_y, 'float32')
